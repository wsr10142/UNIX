#!/usr/bin/tcsh
# This program approximates grep, but using sed. (Originally, I planned to
# have mgrep allow multi-line-spanning patterns, which would have made it
# more powerful than grep, thus proving that sed is useful and powerful.
# But, as I worked out the solution, it got a bit too complicated. So I
# decided to simplify the assignment -- and that is why we are just making
# an approximate implementation of grep.)

# 使用sed模擬grep

# There are two assumptions in this assignment:
#  - The files that are being searched will not have "=" symbols in them.
#    (There are ways to avoid this requirement, but I'm keeping things
#    simple.)
#  - Other than the error of not giving any regular expressions to search,
#    you may assume that there will be no errors in the command-line flags
#    the user passes in.

# 被搜尋文件不會有 = 符號
# 只有 '沒有提供正則表達式' 的錯誤

# The following cleans up any temporary files that may have been created:
# 清理任何可能已創建的臨時文件
rm -f .__args[12] .__redirect[12]

# Because we are passing regular expressions as arguments, there is the
# possibility of a space within an argument (eg, ./mgrep "A 4 word expr"<F).
# In order to preserve the difference between spaces inside arguments and 
# those spaces that separate arguments, we need to store each argument into
# separate lines of a file (the file's name is to be ".__args1"):
# 因為我們傳遞的是正則表達式作為參數，所以有可能在參數內有空格
# 為了保持參數內空格和參數間空格的區別，我們需要將每個參數存儲到一個文件的單獨行中
# 該文件名為 ".__args1"
foreach A ( $*:q )
   echo "delimiter "$A >> .__args1
end

# The following piped command sequence makes some tweaks to .__args1 and
# stores the result to .__args2 (we can't store directly back to .__args1,
# because sed does not work right if the same file is used for both its
# input and its output).
# 以下管道命令序列對 .__args1 進行一些調整，並將結果存儲到 .__args2 中
# 我們不能直接存儲回 .__args1，因為如果 sed 的輸入和輸出是同一個文件，它將無法正常工作

# So what are those "tweaks"?
#  - As for the first sed one-liner, its job is to standardize the way that
#    The passed-in flags are represented. We can understand what it means to
#    "standardize" by a demonstration of the non-standardized flexibility
#    that UNIX allows for indicating command-line flags. Consider:
#        % seq 10 120 | grep -now '[12]0' | tr \\n ,
#        1:10,11:20,% seq 10 120 | grep -now -e10 -e20 | tr \\n ,
#        1:10,11:20,% seq 10 120 | grep -now -e 10 -e 20 | tr \\n ,
#        1:10,11:20,% seq 10 120 | grep -n -o -we 10 -e 20 | tr \\n ,
#        1:10,11:20,% seq 10 120 | grep -n -o -w -e 10 -e 20 F | tr \\n ,
#        1:10,11:20,% seq 10 120 | grep -n -o -w -e\[12]0 F | tr \\n ,
#        1:10,11:20,% seq 10 120 | grep -n -o -w \[12]0 F | tr \\n ,
#        1:10,11:20,% seq 10 120 | grep -n -o -w F -e\[12]0 | tr \\n ,
#        1:10,11:20,%
#
#    OK. So what is the "standardized" flag format that we will use?
#    The answer is that multiflag input lines will go into separate lines.
#    So an input line of "-ninwoven" becomes "-n\n-i\n-n\n-w\n-o\n-v\n-en".
#    (Note that, for this assignment, only the v, i, n, o, w, and e flags
#    are used. Not also that the things after a -e flag are an expression,
#    so they don't expand onto different lines.)
#    Another standardization rule is that the argument for the "-e" must be
#    moved so it comes right after the -e. So an input "-eregexp" is good,
#    but an input "-e regexp" will be on two lines of the .__args1 file.
#    You'll need to do a "N" and a "s/.../.../" to turn it into "-eregexp".
# 
#  - As for the second sed one-liner, its job is to make sure the regular
#    expression does have a "-e" in front of it.  Let's explain that...
#    Look again at some of the earlier nonstandard-flag examples:
#        % seq 10 120 | grep -now '[12]0' | tr \\n ,
#        ...
#        1:10,11:20,% seq 10 120 | grep -n -o -w \[12]0 F | tr \\n ,
#        1:10,11:20,% seq 10 120 | grep -n -o -w F -e\[12]0 | tr \\n ,
#        1:10,11:20,%
#    See thaㄤt grep does not require a -e in front of the expression -- if
#    there is no -e, then the first argument that doesn't have a "-" is the
#    one that is to be treated as the expression.
#    Therefore, what does the second sed oneliner do? It puts a "-e" in
#    front of the first line that doesn't start with a "-", but only if
#    there are no "-e"s already. (Hint: this means you need to read all 
#    lines in first-- otherwise you won't know there are no "-e"s already)

# 第一行要將flag分隔成單獨的行，像是輸入-now，要變成-n -o -w，將單獨一行的-e，將其與下一行合併
# 第二行如果某行不是以 - 開頭，並且之前的行也沒有 -e，則將其添加 -e
# :a 定義標籤a
cat .__args1 | sed 's/delimiter //; /-[vinowe]*$/s/[vinowe]/-&/g; s/--/-/; s/-./&temp/g; s/temp-/\n-/g; s/temp//g; /^-e$/N; s/-e\n/-e/; s/delimiter //' |\
               sed ':a; N; $\!ba; /-e/bend; s/^[^-]/-e&/; tend; s/\n[^-]/\n-e&/1; s/-e\n/-e/; :end' > .__args2
               #sed ':a; N; $\!ba; /-e/q; s/\n[^-]/\n-e&/1; s/-e\n/-e/'> .__args2

# At this point, the only way to not have a "-e" flag in .__args2 is if
# the user did not provide any expressions. So that is what the following
# ____________ tests for:
# 唯一沒有 -e 標誌的情況是用戶沒有提供任何正則表達式
# 確認是否有包含 -e
if ( `grep -c -- "^-e" .__args2` == 0 ) then
   echo Usage: ./mgrep [OPTION]... PATTERNS [FILE]...
   rm -f .__args[12] .__redirect[12]
   exit 1
endif

# The following line passes only the flags into sed2sed:
# 傳遞flag給sed2sed
grep -v ^\[^-] .__args2 | ./sed2sed.sed > .__args1

# The following line stores all the nonflags of .__args2 into an array:
# 將不是以-開頭的，也就是文件名稱設成filenames
set filenames = ( `grep '^[^-]' .__args2` )

# The following line tests for whether the filenames array is empty:
# 當檔案名稱為空的時候，表示輸入數據是通過管道或重定向流入的，應該是說用輸入的吧
if ( $#filenames == 0 ) then
   # If the array is empty, then no file name was passed-in. That means
   # that the input data is being streamed in through a pipe or redirect.
   # The following line puts the stream into a file, .__redirect1: 
   # 將流輸入到一個文件.__redirect1中
   cat > .__redirect1
   # Now that the input is in a file, its name can store into the array:
   set filenames = ( .__redirect1 )
endif

#We create an empty variable, FN:
# 設定一個變數FN
set FN

#We loop through the files:
# 搜尋文件
foreach f ( $filenames )
   # If there are multiple files, then we do a: "set FN = $f\:". But why?
   # It is because, when there are multiple input files, grep will put
   # the file name in front of each. See that this happening here:
   #     % seq 4 | tee F1 > F2 ; grep 3 F?
   #     F1:3
   #     F2:3
   #     % grep 3 F1
   #     3
   #     %
   # 有多個檔案名稱，將每個文件名稱存到FN中
   if ( $#filenames > 1 ) then
      set FN = $f\:
   endif

   # So now, we pass the file as an input to a sed that gets its program
   # from .__args1, which we created above.
   # This output is then sent to a second sed that adds any "...:"s to the
   # front of output lines-- be it a "filename:" and/or a "linenumber:".
   # Note: consulting sed2sed.sed, we see that a -n flag will result in
   # three output lines for each match: 1) a "=", 2) a line #, 3) the line.
   # Also note: this time we use " instead of ', because we need to use $FN.
   # 輸入是file的內容
   # args1包含一系列的sed命令
   # 將文件名稱或行數插入到輸出的每一行前面
   cat $f | sed -f .__args1 |\
            sed "s/=/'$f'/g"
end

#rm -f .__args[12] .__redirect[12]